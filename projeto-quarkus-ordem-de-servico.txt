			CDI:
				-
			JAX-RS:
				-
			JPA:
				-
			
			.\mvnw quarkus:dev
			
			.\mvnw quarkus:add-extensions -Dextensions="hibernate-orm-panache"
			.\mvnw quarkus:add-extensions -Dextensions="quarkus-jdbc-postgresql"
			.\mvnw quarkus:add-extensions -Dextensions="quarkus-resteasy-jackson"
			.\mvnw quarkus:add-extensions -Dextensions="quarkus-smallrye-openapi"
			
			import.sql
				insert into OrdemServico(id, descricao, data, categoria ) values(nestval('hibernate_sequence'), 'Realizar troca de impressora.', LocalDate.of(2021, 28, 12), 'URGENTE');
				insert into OrdemServico(id, descricao, data, categoria ) values(nestval('hibernate_sequence'), 'Realizar troca de cpu.', LocalDate.of(2021, 28, 12), 'NAO URGENTE');
				insert into OrdemServico(id, descricao, data, categoria ) values(nestval('hibernate_sequence'), 'Realizar troca de roteador.', LocalDate.of(2021, 28, 12), 'OUTRAS');
				insert into OrdemServico(id, descricao, data, categoria ) values(nestval('hibernate_sequence'), 'Realizar troca de cabo de rede.', LocalDate.of(2021, 28, 12), 'URGENTE');
				insert into OrdemServico(id, descricao, data, categoria ) values(nestval('hibernate_sequence'), 'Realizar troca de impressora.', LocalDate.of(2021, 28, 12), 'OUTRAS');
				
			
			
			entidade: OrdemServico (descricao, data, categoria)
				
				@Get
				List<OrdemServico> list(){
				return OrdemServico.listAll();}
				
				@Post
				@Transactional
				public void novaOrdemServico(){
					OrdemServico ordenServico = new OrdemServico();
					ordenServico.descricao = "Realizar troca de impressora.";
					ordenServico.data = LocalDate.of(2021, 5, 12) ;
					ordenServico.categoria = "OUTRAS";
					ordenServico.persist();
					}
					
				public class InserirOrdemServicoDTO{
					private String descricao;
					private LocalDate data;
					private String categoria;
					@CreationTimestamp
					private LocalDate dataCriacao;
					@UpdateTimestamp
					private LocalDate dataAtualizacao;
				}
				
				public void novaOrdemServico(InserirOrdemServicoDTO inserirOrdemServicoDTO){
					
					OrdemServico ordenServico = new OrdemServico();
					ordenServico.descricao = inserirOrdemServicoDTO.getDescricao;
					ordenServico.data = inserirOrdemServicoDTO.getData;
					ordenServico.categoria = inserirOrdemServicoDTO.categoria;
				}
				
				public void novaOrdemServico(InserirOrdemServicoDTO inserirOrdemServicoDTO){
					ordemServicoService.novaOrdemServico(inserirOrdemServicoDTO);
				}
				
				exemplo:
				
					@Path("/ordemservico")
					@Consumes(APPLICATION_JSON)
					@Produces(APPLICATION_JSON)
					public class OrdemServico {
						@Inject
						OrdemRepository OrdemRepository;

						@GET
						@Path("/{id}")
						Response get(@PathParam("id")Long id) {
							return OremRepository.find(id)
												 .map(Response::ok)
												 .orElse(Response.status(NOT_FOUND))
												 .build();
						}
					}
					
					@Path("/ordemservico")
					public class OrdemServicoResource {

						@GET
						@Produces(MediaType.APPLICATION_JSON)
						public List<OrdemServico> getAllOrdemServico() {}

						@POST
						@Produces(MediaType.APPLICATION_JSON)
						public Response createOrdemServico(OrdemServico ordemServico) {}

						@DELETE
						@Path("{id}")
						@Produces(MediaType.APPLICATION_JSON)
						public Response deleteOrdemServico(
							@PathParam("id") String id) {}


						@GET
						@Produces(MediaType.APPLICATION_JSON)
						@Path("buscar")
						public Response searchOrdemServico(
							@QueryParam("id") String id) {}
					}
					
					@Provider
					public class ErrorMapper
						implements ExceptionMapper<Exception> {

						@Override
						public Response toResponse(Exception exception) {
							int code = 500;
							if (exception instanceof WebApplicationException) {
								code = ((WebApplicationException) exception)
									.getResponse().getStatus();
							}
							return Response.status(code)
								.entity(
									Json.createObjectBuilder()
									.add("error", exception.getMessage())
									.add("code", code)
									.build()
								)
								.build();
							}
						}